import React, { useState, useEffect } from "react";
import "./calculator.css";

const getImageSrc = (imgData) => {
Â  if (!imgData) return "placeholder.png";
Â  if (imgData.startsWith("data:")) return imgData;
Â  return `http://localhost:5000/${imgData}`; // ðŸ‘ˆ Serve uploaded image
};

const Calculator = () => {
Â  const [activeTab, setActiveTab] = useState("new");
Â  const [cart, setCart] = useState(() => JSON.parse(localStorage.getItem("cart")) || []);
Â  const [cartMessage, setCartMessage] = useState("");
Â  const [newCalculators, setNewCalculators] = useState([]);
Â  const [oldCalculators, setOldCalculators] = useState([]);
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState(null);

Â  const fetchCalculators = async () => {
Â  Â  setLoading(true);
Â  Â  try {
      // This URL is correct, assuming you fixed Sell.jsx to save the category as lowercase
Â  Â  Â  const response = await fetch("http://localhost:5000/api/products/category/calculators");
Â  Â  Â  if (!response.ok) throw new Error(`HTTP ${response.status}`);
Â  Â  Â  const data = await response.json();

Â  Â  Â  console.log("Fetched calculators:", data);
Â  Â  Â  setNewCalculators(data.filter((c) => c.condition === "new"));
      
      // --- FIX 1 ---
      // Changed "old" to "used" to match the data saved from Sell.jsx
Â  Â  Â  setOldCalculators(data.filter((c) => c.condition === "used"));
Â  Â  } catch (err) {
Â  Â  Â  setError("Failed to fetch calculators");
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

  // --- FIX 2 ---
  // Updated useEffect to listen for new products and refetch data
Â  useEffect(() => {
    // 1. Fetch data on initial load
Â  Â  fetchCalculators();

    // 2. Define a function to handle the event
    const handleNewProduct = () => {
      console.log("New product detected, refetching calculators...");
      fetchCalculators();
    };

    // 3. Listen for the custom event from Sell.jsx
    window.addEventListener("newProductPublished", handleNewProduct);

    // 4. Clean up the listener when the component unmounts
    return () => {
      window.removeEventListener("newProductPublished", handleNewProduct);
    };
Â  }, []); // The empty array [] ensures this setup only runs once

Â  const addToCart = (item) => {
Â  Â  const existing = cart.find((i) => i._id === item._id);
Â  Â  const updated = existing
Â  Â  Â  ? cart.map((i) => (i._id === item._id ? { ...i, quantity: i.quantity + 1 } : i))
Â  Â  Â  : [...cart, { ...item, quantity: 1 }];
Â  Â  setCart(updated);
Â  Â  localStorage.setItem("cart", JSON.stringify(updated));
Â  Â  setCartMessage(`'${item.title}' added to cart!`);
Â  Â  setTimeout(() => setCartMessage(""), 3000);
Â  };

Â  const displayed = activeTab === "new" ? newCalculators : oldCalculators;

Â  if (loading) return <p>Loading calculators...</p>;
Â  if (error) return <p>{error}</p>;

Â  return (
Â  Â  <div className="calculator-page">
Â  Â  Â  <div className="cart-icon">
Â  Â  Â  Â  <span className="cart-count">
Â  Â  Â  Â  Â  {cart.reduce((acc, item) => acc + item.quantity, 0)}
Â  Â  Â  Â  </span>
Â  Â  Â  Â  <img src="cart-icon.png" alt="Cart" />
Â  Â  Â  </div>

Â  Â  Â  <div className="button-group">
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  className={`tab-btn ${activeTab === "new" ? "active" : ""}`}
Â  Â  Â  Â  Â  onClick={() => setActiveTab("new")}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  ðŸ§® New Calculators
Â  Â  Â  Â  </button>
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  className={`tab-btn ${activeTab === "old" ? "active" : ""}`}
Â  Â  Â  Â  Â  onClick={() => setActiveTab("old")}
Â  Â  Â  Â  >
          {/* You can keep this label as "Old" for the user interface */}
Â  Â  Â  Â  Â  ðŸ”¢ Old Calculators 
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  <div className="calculator-container">
Â  Â  Â  Â  {displayed.length > 0 ? (
Â  Â  Â  Â  Â  displayed.map((calc) => (
Â  Â  Â  Â  Â  Â  <div key={calc._id} className="calculator-card">
Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  src={calc.images?.[0] ? getImageSrc(calc.images[0]) : "placeholder.png"}
Â  Â  Â  Â  Â  Â  Â  Â  alt={calc.title}
Â  Â  Â  Â  Â  Â  Â  Â  className="calculator-image"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <h3>{calc.title}</h3>
Â  Â  Â  Â  Â  Â  Â  <p className="price">â‚¹{calc.price}</p>
Â  Â  Â  Â  Â  Â  Â  <button className="add-btn" onClick={() => addToCart(calc)}>
Â  Â  Â  Â  Â  Â  Â  Â  Add to Cart
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <p>No {activeTab} calculators available.</p>
Â  Â  Â  Â  )}
Â  Â  Â  </div>

Â  Â  Â  {cartMessage && <div className="cart-message">{cartMessage}</div>}
Â  Â  </div>
Â  );
};

export default Calculator;